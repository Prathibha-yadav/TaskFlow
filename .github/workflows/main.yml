name: postgres
on: push

jobs:
  run-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: ${{ secrets.PG_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_DATABASE }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SERVICE_ID: ${{ secrets.SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker-compose -f docker-compose.yml build

      - name: Push Docker image to Docker Hub
        run: docker-compose -f docker-compose.yml push

      - name: Install dependencies
        run: docker-compose -f docker-compose.yml run todo-app npm ci

      - name: Run unit tests
        run: docker-compose -f docker-compose.yml run todo-app npm test

      - name: Run the app
        id: run-app
        run: |
          docker-compose -f docker-compose.yml up -d
          docker-compose -f docker-compose.yml exec todo-app npx sequelize-cli db:drop
          docker-compose -f docker-compose.yml exec todo-app npx sequelize-cli db:create
          docker-compose -f docker-compose.yml exec todo-app npx sequelize-cli db:migrate
          sleep 5

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.yml exec todo-app npm install cypress cypress-json-results
          docker-compose -f docker-compose.yml exec todo-app npx cypress run --env STUDENT_SUBMISSION_URL="http://localhost:3000/"

      - name: Slack Notification
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          channel: '#pipeline'
          message: |
              Build and Deploy Status: ${{ job.status }}
              Job Name: ${{ github.job }}
              Workflow: ${{ github.workflow }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-prod:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy to production
        run: docker-compose -f docker-compose-prod.yml up -d
